// backend/src/controllers/tourController.js
const db = require('../config/database');
const tourService = require('../services/TourDetectionService');
const logger = require('../utils/logger');

class TourController {
  
  /**
   * D√©marrer un tour
   * POST /api/tours/start
   */
  async startTour(req, res, next) {
    try {
      const { solId, dateDebut } = req.body;
      const userId = req.user.userId || req.user.id;

      logger.info('üöÄ Starting tour', { solId, dateDebut, userId });

      // V√©rifier que l'utilisateur est admin ou cr√©ateur du Sol
      const solQuery = `
        SELECT created_by, statut 
        FROM sols 
        WHERE id = ?
      `;
      const sols = await db.executeQuery(solQuery, [solId]);

      if (sols.length === 0) {
        return res.status(404).json({
          success: false,
          error: 'Sol non trouv√©'
        });
      }

      const sol = sols[0];

      if (req.user.role !== 'admin' && sol.created_by !== userId) {
        return res.status(403).json({
          success: false,
          error: 'Seul le cr√©ateur ou un admin peut d√©marrer un tour'
        });
      }

      // D√©marrer le tour
      await tourService.startTour(solId, dateDebut ? new Date(dateDebut) : new Date());

      // R√©cup√©rer le Sol mis √† jour
      const updatedSol = await db.executeQuery(
        'SELECT * FROM sols WHERE id = ?',
        [solId]
      );

      res.json({
        success: true,
        message: 'Tour d√©marr√© avec succ√®s',
        sol: updatedSol[0]
      });

    } catch (error) {
      logger.error('‚ùå Start tour error:', error);
      res.status(500).json({
        success: false,
        error: 'Erreur lors du d√©marrage du tour'
      });
    }
  }

  /**
   * Terminer le tour actuel
   * POST /api/tours/complete
   */
  async completeTour(req, res, next) {
    try {
      const { solId } = req.body;
      const userId = req.user.userId || req.user.id;

      logger.info('‚úÖ Completing tour', { solId, userId });

      // V√©rifier les permissions
      const solQuery = `
        SELECT created_by, tour_actuel 
        FROM sols 
        WHERE id = ?
      `;
      const sols = await db.executeQuery(solQuery, [solId]);

      if (sols.length === 0) {
        return res.status(404).json({
          success: false,
          error: 'Sol non trouv√©'
        });
      }

      const sol = sols[0];

      if (req.user.role !== 'admin' && sol.created_by !== userId) {
        return res.status(403).json({
          success: false,
          error: 'Seul le cr√©ateur ou un admin peut terminer un tour'
        });
      }

      // V√©rifier que tous les paiements sont transf√©r√©s
      const allTransferred = await tourService.areAllPaymentsTransferred(
        solId,
        sol.tour_actuel
      );

      if (!allTransferred) {
        return res.status(400).json({
          success: false,
          error: 'Tous les paiements doivent √™tre transf√©r√©s avant de terminer le tour'
        });
      }

      // Terminer le tour
      await tourService.completeTour(solId);

      res.json({
        success: true,
        message: 'Tour termin√© avec succ√®s'
      });

    } catch (error) {
      logger.error('‚ùå Complete tour error:', error);
      res.status(500).json({
        success: false,
        error: 'Erreur lors de la finalisation du tour'
      });
    }
  }

  /**
   * Passer au tour suivant
   * POST /api/tours/next
   */
  async nextTour(req, res, next) {
    try {
      const { solId } = req.body;
      const userId = req.user.userId || req.user.id;

      logger.info('‚û°Ô∏è Moving to next tour', { solId, userId });

      // Terminer le tour actuel
      await this.completeTour(req, res, () => {});

      // D√©marrer le nouveau tour
      await tourService.startTour(solId);

      res.json({
        success: true,
        message: 'Passage au tour suivant effectu√©'
      });

    } catch (error) {
      logger.error('‚ùå Next tour error:', error);
      res.status(500).json({
        success: false,
        error: 'Erreur lors du passage au tour suivant'
      });
    }
  }
}

module.exports = new TourController();